INSTALLATION:

AMI--> Amazon linux
Instance type--> t2.micro
Security Group--> allow all-traffic
Terminal -->Mobaxterm
-------------------------------------------------------------------------------------

PROCEDURE TO INSTALL MAVEN:

1) open chrome-> search download maven->click on apache maven ->select apache-maven-bin.tar.gz ->right clilck -> copy link address

2) connect instance to mobaxterm terminal

3) $wget paste the link address

4) $ls

5) $tar -zxvf paste the downloaded apache-maven ->ls

6) $mv apache-maven-3.9.6(extracted file name) Maven

7) $ls

8) $cd Maven/

9) $ls

10) $ cd bin/

11) $pwd ->copy the path

12) cd  ->ls

13) vi .bashrc
	
	(insert mode) after fi type
    export PATH=/root/Maven/bin:$PATH
		(path you copied)
			
14) $source .bashrc

15) $mvn --version

16) $sudo yum install java-11* -y  -->$java --version

17) $mvn --version

----------------------------------------------------------------------------------------------------

TASK1 : GENERATE THE .jar file


1) $mvn archetype:generate
 	
	choose number to generate jar file : 2099
	choose a number : 8
	value for property groupid: wipro [comapany name]
	artifact id : canara [project name]
	version : -
	package : -

	Y: y
2) $ls

3) $cd canara/ ->$ls -> $cat pom.xml -> $cd src/ -> $ls -> $cd main/ -> $cd java/ -> $ls -> $cd wipro/ -> $ls ->cat app.java -> cd 

Note:all maven commands should be executed inside the maven project

4) $cd canara/

5) <root@canara> $mvn validate

6) $mvn clean

7) $mvn compile [here .class file be generated] to check -> $cd target/ -> $ls -> $cd classes -> $ls -> $cd wipro -> $app.class 

8) $cd ..[came back to canara project]

9) $mvn test  -> $ls -> $target/ -> $cd surfire-reports -> $cd .. ->$cd ..

10) $mvn package -> [here the .jar file is generated] to check -> $cd target ->$ls -> $cd ..


11) $mvn verify

12) $mvn install 

13) $mvn site [here the report will be generated] to check -> $ls -> $cd target/ -> $ls -> $cd site -> $ls -> $cat summary.html

---------------------------------------------------------------------------------------------------------------------------------------

TASK2: GENERATE THE WAR FILE (.war)


1) $mvn archetype:generate

	Choose a number or apply filter (format: [groupId:]artifactId, case sensitive contains): 2099: 2104
	Choose org.apache.maven.archetypes:maven-archetype-webapp version:
	1: 1.0-alpha-1
	2: 1.0-alpha-2
	3: 1.0-alpha-3
	4: 1.0-alpha-4
	5: 1.0
	6: 1.3
	7: 1.4
	Choose a number: 7: 7
	groupid: testyantra
	artifactid:testfreshers
	version:-
	package:-
	Y:y

2) $cd testfrershers/

3) $mvn validate
     
4) $mvn clean
    
5) $mvn compile
     
6) $mvn test
   
7) $mvn package [the war file is generated]-> $cd target/ -> $ls -> $cd ..
    
8) $mvn verify
   
9) $mvn install
    
10)  $mvn site -> $cd target/ -> $ls -> $cd site/ ->  $ls -> $cat summary.html


-------------------------------------------------------------------------------------------

 GENERATE war file and PUSH THE pom.xml  AND src file TO GITHUB in linux terminal

1) generate war file 

2) $sudo yum install git 

3) $git init

4) $git commit -m "m1"

5)create one github repository and generate the token     
   To create token:: profile ->settings ->developer settings 
->personal access tokens -> tokens(classic) ->create new token 
->provide name for token ->select all checkboxes ->generate token ->copy the token path

6) $git remote add origin github_repository_url[configure the path: github url after http://token-path@ remaining_repository_url]

7) $git push origin master






